{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a3f1f513-301a-4a7a-bf00-5883b327d03e",
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "NeuralGates - A library for implementing logic gates and digital circuits using neural networks.\n",
    "\n",
    "This library provides an easy-to-use interface for training neural network models\n",
    "to behave like logical gates and combining them to create more complex digital circuits\n",
    "like half adders and full adders.\n",
    "\"\"\"\n",
    "\n",
    "import random\n",
    "import math\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "# Define common logic gate truth tables\n",
    "LOGIC_GATES = {\n",
    "    \"AND\": [\n",
    "        [0, 0, 0],\n",
    "        [0, 1, 0],\n",
    "        [1, 0, 0],\n",
    "        [1, 1, 1]\n",
    "    ],\n",
    "    \"OR\": [\n",
    "        [0, 0, 0],\n",
    "        [0, 1, 1],\n",
    "        [1, 0, 1],\n",
    "        [1, 1, 1]\n",
    "    ],\n",
    "    \"NAND\": [\n",
    "        [0, 0, 1],\n",
    "        [0, 1, 1],\n",
    "        [1, 0, 1],\n",
    "        [1, 1, 0]\n",
    "    ],\n",
    "    \"NOR\": [\n",
    "        [0, 0, 1],\n",
    "        [0, 1, 0],\n",
    "        [1, 0, 0],\n",
    "        [1, 1, 0]\n",
    "    ],\n",
    "    \"XOR\": [\n",
    "        [0, 0, 0],\n",
    "        [0, 1, 1],\n",
    "        [1, 0, 1],\n",
    "        [1, 1, 0]\n",
    "    ],\n",
    "    \"XNOR\": [\n",
    "        [0, 0, 1],\n",
    "        [0, 1, 0],\n",
    "        [1, 0, 0],\n",
    "        [1, 1, 1]\n",
    "    ]\n",
    "}\n",
    "\n",
    "\n",
    "class NeuralGate:\n",
    "    \"\"\"\n",
    "    A neural network implementation of a logical gate.\n",
    "    \"\"\"\n",
    "    def __init__(self, gate_type=None, seed=None):\n",
    "        \"\"\"\n",
    "        Initialize a neural gate with random weights and biases.\n",
    "        \n",
    "        Args:\n",
    "            gate_type (str, optional): Type of logic gate to train (\"AND\", \"OR\", \"NAND\", \"XOR\", etc).\n",
    "            seed (int, optional): Random seed for reproducibility.\n",
    "        \"\"\"\n",
    "        self.or_w1 = 0.0\n",
    "        self.or_w2 = 0.0\n",
    "        self.or_b = 0.0\n",
    "        self.and_w1 = 0.0\n",
    "        self.and_w2 = 0.0\n",
    "        self.and_b = 0.0\n",
    "        self.nand_w1 = 0.0\n",
    "        self.nand_w2 = 0.0\n",
    "        self.nand_b = 0.0\n",
    "        \n",
    "        # Initialize with random weights if seed is provided\n",
    "        if seed is not None:\n",
    "            self.initialize_random(seed)\n",
    "            \n",
    "        # Set gate type and training data\n",
    "        self.gate_type = gate_type\n",
    "        self.training_data = LOGIC_GATES.get(gate_type) if gate_type else None\n",
    "        \n",
    "        # Training metrics\n",
    "        self.training_history = []\n",
    "    \n",
    "    def initialize_random(self, seed=42):\n",
    "        \"\"\"\n",
    "        Initialize the weights with random values using a seed.\n",
    "        \n",
    "        Args:\n",
    "            seed (int): Seed for the random number generator.\n",
    "        \"\"\"\n",
    "        def rand_no(s):\n",
    "            random.seed(seed + s)\n",
    "            return random.random()\n",
    "        \n",
    "        self.or_w1 = rand_no(1)\n",
    "        self.or_w2 = rand_no(2)\n",
    "        self.or_b = rand_no(3)\n",
    "        self.and_w1 = rand_no(4)\n",
    "        self.and_w2 = rand_no(5)\n",
    "        self.and_b = rand_no(6)\n",
    "        self.nand_w1 = rand_no(7)\n",
    "        self.nand_w2 = rand_no(8)\n",
    "        self.nand_b = rand_no(9)\n",
    "    \n",
    "    def forward(self, x1, x2):\n",
    "        \"\"\"\n",
    "        Forward pass through the neural network.\n",
    "        \n",
    "        Args:\n",
    "            x1 (float): First input.\n",
    "            x2 (float): Second input.\n",
    "            \n",
    "        Returns:\n",
    "            float: Output of the neural network.\n",
    "        \"\"\"\n",
    "        a = math.tanh(x1 * self.or_w1 + x2 * self.or_w2 + self.or_b)\n",
    "        b = math.tanh(x1 * self.nand_w1 + x2 * self.nand_w2 + self.nand_b)\n",
    "        return math.tanh(a * self.and_w1 + b * self.and_w2 + self.and_b)\n",
    "    \n",
    "    def cost(self, training_data=None):\n",
    "        \"\"\"\n",
    "        Calculate the cost/error of the model on training data.\n",
    "        \n",
    "        Args:\n",
    "            training_data (list, optional): Training data in format [[x1, x2, y], ...].\n",
    "                If not provided, uses the gate's training data.\n",
    "                \n",
    "        Returns:\n",
    "            float: Mean squared error.\n",
    "        \"\"\"\n",
    "        data = training_data if training_data is not None else self.training_data\n",
    "        if data is None:\n",
    "            raise ValueError(\"No training data provided\")\n",
    "            \n",
    "        result = 0.0\n",
    "        for x in data:\n",
    "            x1, x2, target = x\n",
    "            y = self.forward(x1, x2)\n",
    "            d = y - target\n",
    "            result += d * d\n",
    "        return result / len(data)\n",
    "    \n",
    "    def finite_diff(self, training_data=None, h=0.0001):\n",
    "        \"\"\"\n",
    "        Calculate gradients using finite differences.\n",
    "        \n",
    "        Args:\n",
    "            training_data (list, optional): Training data.\n",
    "            h (float): Small value for derivative approximation.\n",
    "            \n",
    "        Returns:\n",
    "            NeuralGate: A NeuralGate object containing gradients.\n",
    "        \"\"\"\n",
    "        data = training_data if training_data is not None else self.training_data\n",
    "        if data is None:\n",
    "            raise ValueError(\"No training data provided\")\n",
    "            \n",
    "        g = NeuralGate()\n",
    "        c = self.cost(data)\n",
    "        \n",
    "        # Calculate gradients for OR weights\n",
    "        params = [\n",
    "            ('or_w1', 'or_w1'), ('or_w2', 'or_w2'), ('or_b', 'or_b'),\n",
    "            ('and_w1', 'and_w1'), ('and_w2', 'and_w2'), ('and_b', 'and_b'),\n",
    "            ('nand_w1', 'nand_w1'), ('nand_w2', 'nand_w2'), ('nand_b', 'nand_b')\n",
    "        ]\n",
    "        \n",
    "        for param_name, grad_name in params:\n",
    "            saved = getattr(self, param_name)\n",
    "            setattr(self, param_name, saved + h)\n",
    "            setattr(g, grad_name, (self.cost(data) - c) / h)\n",
    "            setattr(self, param_name, saved)\n",
    "            \n",
    "        return g\n",
    "    \n",
    "    def adapt(self, gradients, learning_rate=0.01):\n",
    "        \"\"\"\n",
    "        Update weights based on gradients.\n",
    "        \n",
    "        Args:\n",
    "            gradients (NeuralGate): Gradient values.\n",
    "            learning_rate (float): Learning rate.\n",
    "            \n",
    "        Returns:\n",
    "            self: The updated model.\n",
    "        \"\"\"\n",
    "        params = [\n",
    "            'or_w1', 'or_w2', 'or_b',\n",
    "            'and_w1', 'and_w2', 'and_b',\n",
    "            'nand_w1', 'nand_w2', 'nand_b'\n",
    "        ]\n",
    "        \n",
    "        for param in params:\n",
    "            current_value = getattr(self, param)\n",
    "            gradient_value = getattr(gradients, param)\n",
    "            setattr(self, param, current_value - gradient_value * learning_rate)\n",
    "            \n",
    "        return self\n",
    "    \n",
    "    def train(self, epochs=10000, learning_rate=0.1, training_data=None, verbose=False, log_interval=1000):\n",
    "        \"\"\"\n",
    "        Train the neural network on the specified logic gate.\n",
    "        \n",
    "        Args:\n",
    "            epochs (int): Number of training epochs.\n",
    "            learning_rate (float): Learning rate.\n",
    "            training_data (list, optional): Custom training data.\n",
    "            verbose (bool): Whether to print progress.\n",
    "            log_interval (int): How often to log progress.\n",
    "            \n",
    "        Returns:\n",
    "            list: Training history (cost at each logged epoch).\n",
    "        \"\"\"\n",
    "        data = training_data if training_data is not None else self.training_data\n",
    "        if data is None:\n",
    "            raise ValueError(\"No training data provided\")\n",
    "            \n",
    "        self.training_history = []\n",
    "        \n",
    "        for epoch in range(epochs):\n",
    "            # Calculate gradients and update weights\n",
    "            gradients = self.finite_diff(data)\n",
    "            self.adapt(gradients, learning_rate)\n",
    "            \n",
    "            # Log progress\n",
    "            if epoch % log_interval == 0 or epoch == epochs - 1:\n",
    "                cost = self.cost(data)\n",
    "                self.training_history.append(cost)\n",
    "                if verbose:\n",
    "                    print(f\"Epoch {epoch}: Cost = {cost:.8f}\")\n",
    "                    \n",
    "        return self.training_history\n",
    "    \n",
    "    def predict(self, x1, x2):\n",
    "        \"\"\"\n",
    "        Make a binary prediction (0 or 1) for inputs based on the rounded output.\n",
    "        \n",
    "        Args:\n",
    "            x1 (float): First input.\n",
    "            x2 (float): Second input.\n",
    "            \n",
    "        Returns:\n",
    "            int: Binary prediction (0 or 1).\n",
    "        \"\"\"\n",
    "        output = self.forward(x1, x2)\n",
    "        return round(output)\n",
    "    \n",
    "    def evaluate(self, training_data=None):\n",
    "        \"\"\"\n",
    "        Evaluate the model on all input combinations and print the results.\n",
    "        \n",
    "        Args:\n",
    "            training_data (list, optional): Data to evaluate on.\n",
    "            \n",
    "        Returns:\n",
    "            dict: Dictionary with evaluation metrics.\n",
    "        \"\"\"\n",
    "        data = training_data if training_data is not None else self.training_data\n",
    "        if data is None:\n",
    "            data = [[0, 0, None], [0, 1, None], [1, 0, None], [1, 1, None]]\n",
    "        \n",
    "        print(f\"{'Input 1':^8} | {'Input 2':^8} | {'Target':^8} | {'Output':^8} | {'Prediction':^10}\")\n",
    "        print(\"-\" * 50)\n",
    "        \n",
    "        correct = 0\n",
    "        for x in data:\n",
    "            x1, x2 = x[0], x[1]\n",
    "            target = x[2] if len(x) > 2 else None\n",
    "            output = self.forward(x1, x2)\n",
    "            prediction = round(output)\n",
    "            \n",
    "            if target is not None and prediction == target:\n",
    "                correct += 1\n",
    "                \n",
    "            target_str = f\"{target}\" if target is not None else \"N/A\"\n",
    "            print(f\"{x1:^8} | {x2:^8} | {target_str:^8} | {output:^8.4f} | {prediction:^10}\")\n",
    "        \n",
    "        metrics = {}\n",
    "        if data[0][2] is not None:  # If targets are provided\n",
    "            metrics['accuracy'] = correct / len(data)\n",
    "            print(f\"\\nAccuracy: {metrics['accuracy'] * 100:.2f}%\")\n",
    "            \n",
    "        return metrics\n",
    "    \n",
    "    def plot_training_history(self):\n",
    "        \"\"\"\n",
    "        Plot the training history (cost over epochs).\n",
    "        \"\"\"\n",
    "        if not self.training_history:\n",
    "            print(\"No training history available.\")\n",
    "            return\n",
    "            \n",
    "        plt.figure(figsize=(10, 6))\n",
    "        plt.plot(range(0, len(self.training_history)), self.training_history)\n",
    "        plt.title(f\"Training History ({self.gate_type if self.gate_type else 'Custom'} Gate)\")\n",
    "        plt.xlabel(\"Logged Epochs\")\n",
    "        plt.ylabel(\"Cost (MSE)\")\n",
    "        plt.grid(True)\n",
    "        plt.yscale('log')\n",
    "        plt.show()\n",
    "    \n",
    "    def get_parameters(self):\n",
    "        \"\"\"\n",
    "        Get the parameters of the model.\n",
    "        \n",
    "        Returns:\n",
    "            dict: Dictionary containing all parameters.\n",
    "        \"\"\"\n",
    "        return {\n",
    "            'or_w1': self.or_w1,\n",
    "            'or_w2': self.or_w2,\n",
    "            'or_b': self.or_b,\n",
    "            'and_w1': self.and_w1,\n",
    "            'and_w2': self.and_w2,\n",
    "            'and_b': self.and_b,\n",
    "            'nand_w1': self.nand_w1,\n",
    "            'nand_w2': self.nand_w2,\n",
    "            'nand_b': self.nand_b,\n",
    "        }\n",
    "    \n",
    "    def set_parameters(self, params):\n",
    "        \"\"\"\n",
    "        Set the parameters of the model.\n",
    "        \n",
    "        Args:\n",
    "            params (dict): Dictionary containing parameters.\n",
    "            \n",
    "        Returns:\n",
    "            self: The updated model.\n",
    "        \"\"\"\n",
    "        for key, value in params.items():\n",
    "            if hasattr(self, key):\n",
    "                setattr(self, key, value)\n",
    "        return self\n",
    "    \n",
    "    \n",
    "    def __str__(self):\n",
    "        \"\"\"String representation of the model.\"\"\"\n",
    "        gate_type = self.gate_type if self.gate_type else \"Custom\"\n",
    "        cost = self.cost(self.training_data) if self.training_data else \"N/A\"\n",
    "        return f\"NeuralGate({gate_type}) - Cost: {cost}\"\n",
    "\n",
    "\n",
    "class HalfAdder:\n",
    "    \"\"\"\n",
    "    Neural network implementation of a half adder.\n",
    "    \"\"\"\n",
    "    def __init__(self, seed=None):\n",
    "        \"\"\"\n",
    "        Initialize a half adder with sum (XOR) and carry (AND) gates.\n",
    "        \n",
    "        Args:\n",
    "            seed (int, optional): Random seed for reproducibility.\n",
    "        \"\"\"\n",
    "        self.sum_gate = NeuralGate(gate_type=\"XOR\", seed=seed)\n",
    "        self.carry_gate = NeuralGate(gate_type=\"AND\", seed=seed if seed is None else seed + 10)\n",
    "    \n",
    "    def train(self, epochs=10000, learning_rate=0.1, verbose=False):\n",
    "        \"\"\"\n",
    "        Train both gates of the half adder.\n",
    "        \n",
    "        Args:\n",
    "            epochs (int): Number of training epochs.\n",
    "            learning_rate (float): Learning rate.\n",
    "            verbose (bool): Whether to print progress.\n",
    "            \n",
    "        Returns:\n",
    "            tuple: Training history for sum and carry gates.\n",
    "        \"\"\"\n",
    "        print(\"Training SUM gate (XOR)...\")\n",
    "        sum_history = self.sum_gate.train(epochs, learning_rate, verbose=verbose)\n",
    "        \n",
    "        print(\"\\nTraining CARRY gate (AND)...\")\n",
    "        carry_history = self.carry_gate.train(epochs, learning_rate, verbose=verbose)\n",
    "        \n",
    "        return sum_history, carry_history\n",
    "    \n",
    "    def compute(self, x1, x2):\n",
    "        \"\"\"\n",
    "        Compute the sum and carry for the half adder.\n",
    "        \n",
    "        Args:\n",
    "            x1 (int): First input bit.\n",
    "            x2 (int): Second input bit.\n",
    "            \n",
    "        Returns:\n",
    "            tuple: (sum bit, carry bit)\n",
    "        \"\"\"\n",
    "        sum_bit = self.sum_gate.predict(x1, x2)\n",
    "        carry_bit = self.carry_gate.predict(x1, x2)\n",
    "        return sum_bit, carry_bit\n",
    "    \n",
    "    def evaluate(self):\n",
    "        \"\"\"Evaluate the half adder on all input combinations.\"\"\"\n",
    "        print(\"HALF ADDER EVALUATION\")\n",
    "        print(\"=====================\")\n",
    "        print(f\"{'Input 1':^8} | {'Input 2':^8} | {'Sum':^8} | {'Carry':^8}\")\n",
    "        print(\"-\" * 40)\n",
    "        \n",
    "        for i in range(2):\n",
    "            for j in range(2):\n",
    "                sum_bit, carry_bit = self.compute(i, j)\n",
    "                print(f\"{i:^8} | {j:^8} | {sum_bit:^8} | {carry_bit:^8}\")\n",
    "    \n",
    "\n",
    "#Do not go gentle into that good night.\n",
    "#Rage, rage against the dying of the light\n",
    "\n",
    "class FullAdder:\n",
    "    \"\"\"\n",
    "    Neural network implementation of a full adder using two half adders.\n",
    "    \"\"\"\n",
    "    def __init__(self, seed=None):\n",
    "        \"\"\"\n",
    "        Initialize a full adder with two half adders and an OR gate.\n",
    "        \n",
    "        Args:\n",
    "            seed (int, optional): Random seed for reproducibility.\n",
    "        \"\"\"\n",
    "        self.first_half_adder = HalfAdder(seed=seed)\n",
    "        self.second_half_adder = HalfAdder(seed=seed + 20 if seed is not None else None)\n",
    "        self.or_gate = NeuralGate(gate_type=\"OR\", seed=seed + 40 if seed is not None else None)\n",
    "    \n",
    "    def train(self, epochs=10000, learning_rate=0.1, verbose=False):\n",
    "        \"\"\"\n",
    "        Train all components of the full adder.\n",
    "        \n",
    "        Args:\n",
    "            epochs (int): Number of training epochs.\n",
    "            learning_rate (float): Learning rate.\n",
    "            verbose (bool): Whether to print progress.\n",
    "        \"\"\"\n",
    "        print(\"Training first half adder...\")\n",
    "        self.first_half_adder.train(epochs, learning_rate, verbose=verbose)\n",
    "        \n",
    "        print(\"\\nTraining second half adder...\")\n",
    "        self.second_half_adder.train(epochs, learning_rate, verbose=verbose)\n",
    "        \n",
    "        print(\"\\nTraining OR gate...\")\n",
    "        self.or_gate.train(epochs, learning_rate, verbose=verbose)\n",
    "    \n",
    "    def compute(self, x1, x2, cin):\n",
    "        \"\"\"\n",
    "        Compute the sum and carry for the full adder.\n",
    "        \n",
    "        Args:\n",
    "            x1 (int): First input bit.\n",
    "            x2 (int): Second input bit.\n",
    "            cin (int): Carry-in bit.\n",
    "            \n",
    "        Returns:\n",
    "            tuple: (sum bit, carry-out bit)\n",
    "        \"\"\"\n",
    "        # First half adder: x1 + x2\n",
    "        sum1, carry1 = self.first_half_adder.compute(x1, x2)\n",
    "        \n",
    "        # Second half adder: sum1 + cin\n",
    "        sum2, carry2 = self.second_half_adder.compute(sum1, cin)\n",
    "        \n",
    "        # OR gate for the carry: carry1 OR carry2\n",
    "        carry_out = self.or_gate.predict(carry1, carry2)\n",
    "        \n",
    "        return sum2, carry_out\n",
    "    \n",
    "    def evaluate(self):\n",
    "        \"\"\"Evaluate the full adder on all input combinations.\"\"\"\n",
    "        print(\"FULL ADDER EVALUATION\")\n",
    "        print(\"====================\")\n",
    "        print(f\"{'Input 1':^8} | {'Input 2':^8} | {'Carry In':^8} | {'Sum':^8} | {'Carry Out':^10}\")\n",
    "        print(\"-\" * 60)\n",
    "        \n",
    "        for i in range(2):\n",
    "            for j in range(2):\n",
    "                for k in range(2):\n",
    "                    sum_bit, carry_out = self.compute(i, j, k)\n",
    "                    print(f\"{i:^8} | {j:^8} | {k:^8} | {sum_bit:^8} | {carry_out:^10}\")\n",
    "    \n",
    "# yo! p"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "557bc605-ec91-45cb-8ab7-55ac91d2cf8d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.33515420139659435"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xor_gate = NeuralGate(\"XOR\", 42)\n",
    "xor_gate.cost()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "917c7231-28d2-48ea-adf3-3b9b63b8fd83",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Input 1  | Input 2  |  Target  |  Output  | Prediction\n",
      "--------------------------------------------------\n",
      "   0     |    0     |    0     |  0.7003  |     1     \n",
      "   0     |    1     |    1     |  0.8605  |     1     \n",
      "   1     |    0     |    1     |  0.7265  |     1     \n",
      "   1     |    1     |    0     |  0.8694  |     1     \n",
      "\n",
      "Accuracy: 50.00%\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'accuracy': 0.5}"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xor_gate.evaluate()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "3b8253d6-0713-48fc-acb8-0f4bdb6f7c55",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[2.0269780082647748e-05,\n",
       " 2.0035422270539055e-05,\n",
       " 1.9822632580698138e-05,\n",
       " 1.9629937245501533e-05,\n",
       " 1.945600151279707e-05,\n",
       " 1.9299613196617956e-05,\n",
       " 1.9159668447766168e-05,\n",
       " 1.903515940278316e-05,\n",
       " 1.8925163428746843e-05,\n",
       " 1.8828833729108948e-05,\n",
       " 1.874546836411378e-05]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xor_gate.train()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "e33728bc-b7cb-43fa-9475-492adbfc606d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Input 1  | Input 2  |  Target  |  Output  | Prediction\n",
      "--------------------------------------------------\n",
      "   0     |    0     |    0     |  0.0001  |     0     \n",
      "   0     |    1     |    1     |  0.9939  |     1     \n",
      "   1     |    0     |    1     |  0.9939  |     1     \n",
      "   1     |    1     |    0     |  0.0002  |     0     \n",
      "\n",
      "Accuracy: 100.00%\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'accuracy': 1.0}"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xor_gate.evaluate()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "8468ff2c-e9eb-487d-bd44-b938a93afacf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.874546836411378e-05"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xor_gate.cost()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "5b03a1d3-e356-4fd6-8266-9ae11ada2789",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "xor_gate.plot_training_history()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "9b45f46f-5b4d-44c9-9c18-80846a384ca7",
   "metadata": {},
   "outputs": [],
   "source": [
    "and_gate = NeuralGate(\"AND\", 69)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "9f2892e6-63d2-4b8d-a62d-7e59b1fb6952",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.5393040361079976"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "and_gate.cost()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "bd03877d-a5ec-495a-bcea-825127917bcc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.515583904919712,\n",
       " 0.0015160240938294775,\n",
       " 0.0004303714336051733,\n",
       " 0.000241926754850315,\n",
       " 0.0001665914248368046,\n",
       " 0.00012654085442891577,\n",
       " 0.00010184717902302042,\n",
       " 8.516374738603538e-05,\n",
       " 7.316864402293566e-05,\n",
       " 6.414653527154182e-05,\n",
       " 5.7130714439141484e-05]"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "and_gate.train()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "f6775f29-d1b4-4da5-9435-308a16740ec6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Input 1  | Input 2  |  Target  |  Output  | Prediction\n",
      "--------------------------------------------------\n",
      "   0     |    0     |    0     | -0.0001  |     0     \n",
      "   0     |    1     |    0     |  0.0002  |     0     \n",
      "   1     |    0     |    0     |  0.0002  |     0     \n",
      "   1     |    1     |    1     |  0.9849  |     1     \n",
      "\n",
      "Accuracy: 100.00%\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'accuracy': 1.0}"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "and_gate.evaluate()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "a745dbac-d794-4ff7-a79f-0eeea541d34b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i1|i2  sum || carry\n",
      "0 | 0 >  0 || 0\n",
      "0 | 1 >  1 || 0\n",
      "1 | 0 >  1 || 0\n",
      "1 | 1 >  0 || 1\n"
     ]
    }
   ],
   "source": [
    "def half_adder():\n",
    "    print(f\"i1|i2  sum || carry\")\n",
    "    for i in range(2):\n",
    "        for j in range(2):            \n",
    "            print(f\"{i} | {j} >  {xor_gate.predict(i,j)} || {and_gate.predict(i,j)}\")\n",
    "half_adder()  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "d9798389-a8d5-4be3-bcf4-1dc7f543b942",
   "metadata": {},
   "outputs": [],
   "source": [
    "or_gate = NeuralGate(\"OR\", 20)    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "5b5b72c2-f101-4508-9ebe-a803135792fe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0.20333573338476174,\n",
       " 0.0004778400478476477,\n",
       " 0.00019958331283613257,\n",
       " 0.0001239976629026343,\n",
       " 8.93219717726144e-05,\n",
       " 6.954787135909687e-05,\n",
       " 5.6814897623716955e-05,\n",
       " 4.7951000600591776e-05,\n",
       " 4.1435560895051574e-05,\n",
       " 3.645017417185194e-05,\n",
       " 3.251947937678701e-05]"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "or_gate.train()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "531ce9d9-c2a8-4867-b0cb-1eea8a313b7f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Input 1  | Input 2  |  Target  |  Output  | Prediction\n",
      "--------------------------------------------------\n",
      "   0     |    0     |    0     |  0.0001  |     0     \n",
      "   0     |    1     |    1     |  0.9922  |     1     \n",
      "   1     |    0     |    1     |  0.9918  |     1     \n",
      "   1     |    1     |    1     |  0.9983  |     1     \n",
      "\n",
      "Accuracy: 100.00%\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'accuracy': 1.0}"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "or_gate.evaluate()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "12b474e2-8f5c-4959-91ba-7d349dc1e64e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i | j | k    s || co\n",
      "==================\n",
      "0 | 0 | 0 >> 0 || 0\n",
      "0 | 0 | 1 >> 1 || 0\n",
      "0 | 1 | 0 >> 1 || 0\n",
      "0 | 1 | 1 >> 0 || 1\n",
      "1 | 0 | 0 >> 1 || 0\n",
      "1 | 0 | 1 >> 0 || 1\n",
      "1 | 1 | 0 >> 0 || 1\n",
      "1 | 1 | 1 >> 1 || 1\n"
     ]
    }
   ],
   "source": [
    "def full_adder():\n",
    "    print(f\"i | j | k    s || co\")\n",
    "    print(\"=\"*18)\n",
    "    for i in range(2):\n",
    "        for j in range(2):\n",
    "            for k in range(2):\n",
    "                xo1 = xor_gate.predict(i,j)\n",
    "                ao1 = and_gate.predict(i,j)\n",
    "                xo2 = xor_gate.predict(xo1,k)\n",
    "                ao2 = and_gate.predict(xo1,k)\n",
    "                or_1 = or_gate.predict(ao1,ao2)\n",
    "\n",
    "                sum_ = xo2\n",
    "                cout = or_1\n",
    "                                \n",
    "                print(f\"{i} | {j} | {k} >> {sum_} || {cout}\")\n",
    "full_adder()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "e93b796c-ac20-4f4e-8160-deac8a228ea1",
   "metadata": {},
   "outputs": [],
   "source": [
    "def bit_adder(a,b):\n",
    "    a_bit = [(a >> x) & 1 for x in range(4)]\n",
    "    b_bit = [(b >> x) & 1 for x in range(4)]\n",
    "\n",
    "    fa_list =[] \n",
    "    carry = 0\n",
    "    \n",
    "    for i in range(4):\n",
    "        fa = FullAdder(seed=69 + i)\n",
    "        fa.train(epochs=5000, learning_rate=0.1, verbose=False)\n",
    "        fa_list.append(fa)\n",
    "\n",
    "    result_bits = []\n",
    "    for x in range(4):\n",
    "        sum_bit, carry = fa_list[x].compute(a_bit[x], b_bit[x], carry)\n",
    "        result_bits.append(sum_bit)\n",
    "\n",
    "    #result_bits.append(carry)\n",
    "\n",
    "    decimal_result = 0\n",
    "    for i, bit in enumerate(result_bits):\n",
    "        decimal_result += bit * (2 ** i)\n",
    "            \n",
    "        # Return binary representation and decimal value\n",
    "    return result_bits[::-1], decimal_result\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "cfef9b83-da8e-47ff-8c28-6f958e035986",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training first half adder...\n",
      "Training SUM gate (XOR)...\n",
      "\n",
      "Training CARRY gate (AND)...\n",
      "\n",
      "Training second half adder...\n",
      "Training SUM gate (XOR)...\n",
      "\n",
      "Training CARRY gate (AND)...\n",
      "\n",
      "Training OR gate...\n",
      "Training first half adder...\n",
      "Training SUM gate (XOR)...\n",
      "\n",
      "Training CARRY gate (AND)...\n",
      "\n",
      "Training second half adder...\n",
      "Training SUM gate (XOR)...\n",
      "\n",
      "Training CARRY gate (AND)...\n",
      "\n",
      "Training OR gate...\n",
      "Training first half adder...\n",
      "Training SUM gate (XOR)...\n",
      "\n",
      "Training CARRY gate (AND)...\n",
      "\n",
      "Training second half adder...\n",
      "Training SUM gate (XOR)...\n",
      "\n",
      "Training CARRY gate (AND)...\n",
      "\n",
      "Training OR gate...\n",
      "Training first half adder...\n",
      "Training SUM gate (XOR)...\n",
      "\n",
      "Training CARRY gate (AND)...\n",
      "\n",
      "Training second half adder...\n",
      "Training SUM gate (XOR)...\n",
      "\n",
      "Training CARRY gate (AND)...\n",
      "\n",
      "Training OR gate...\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "([1, 1, 0, 1], 13)"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bit_adder(5,8)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "8f822b21-56d7-46ab-88d1-ce2cd6ec0c51",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'0b1101'"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bin(13)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "afe3d8d6-da9d-4463-b8e7-5ab5641a946d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'1101'"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "format(13, '04b')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a9547663-6ac6-4460-9204-731ce5e3de2f",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a6c8f07f-2bd2-477d-a718-8bb464d6e7eb",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c6e9cb6c-24d3-4531-8bdc-ff0bb6aee50c",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "15562659-d945-4a5d-949e-7cbc4102f5e2",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python (gpu_env)",
   "language": "python",
   "name": "gpu_env"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
